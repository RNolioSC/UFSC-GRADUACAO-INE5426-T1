1. A gramática X++ é recursiva à esquerda? Justifique detalhadamente sua resposta.

Não é recursiva à esquerda.

Definimos formalmente nossa gramática:

Seja G = (Vn, Vt, P, program), onde:

> Vn é o conjunto de símbolos não terminais da gramática 
> Vt é o conjunto de símbolos terminais da gramática 
> P é o conjunto de produções da gramática, descritas no arquivo xcc.g4
> program é o símbolo inicial da gramática

Sejam também:
> A, B ∈ Vn
> V = Vn ∪ Vt
> α, γ ∈ V*
> β ∈ Vt
> ⇒+ indica uma derivação em um ou mais passos.
> φ induca um conjunto vazio.

Sabemos que G é recursiva à esquerda sse ∃ A ⇒+ Aα.

Seja P' o conjunto das produções livres de recursão à esquerda. Portanto, (P - P') é o conjunto de produções que pode ter recursão à esquerda.

Inicializamos P' como vazio. Analizamos cada produção: se ∄ A → Bα | ε (isto é, todas as produções de A são do tipo A → βα), adicionamos A a P':

P' = {classdecl, classbody, vardecl, constructdecl, methoddecl, methodbody, printstat, readstat, returnstat, superstat, ifstat, forstat, lvalue, alocexpression}

Analizamos cada produção em (P - P'): se todas as produções de A são do tipo A → Cα, onde C ∈ P', adicionamos A a P':

P' = P' ∪ {atribstat, factor}

Repetindo este passo algumas vezes:

P' = P' ∪ {statement, statlist, unaryexpr, term, numexpression, expression}

Neste ponto (P - P') = {program, classlist, paramlist, arglist}, pois cada um destes não terminais pode derivar épsilon.

Analizamos cada produção em (P - P'): se  ∄ A → Bα, adicionamos B a P':

P' = P' ∪ {arglist, paramlist}

Neste ponto (P - P') = {program, classlist} 
Podemos reescrever classlist → (classdecl)+ como classlist → classdecl (classdecl)*, logo, adicionamos classlist a P'. Temos program → classlist | ε. Como classlist ∈ P' e  ∄ A → program α, adicionamos program a P'

Como (P - P') = φ, então não existe recursão à esquerda nesta gramática.


2. A gramática X++ está fatorada à esquerda? Se não, fatore.

Sejam f1, f2, ... fn os conjuntos FIRST das produções de A. Sabemos que G está fatorada (à esquerda, para um símbolo) se:

∀ A, f1 ∩ f2 ∩ ... ∩ fn = φ 

logo, vamos computar os conjuntos first para cada A, começando pelos triviais:

FIRST(classdecl) = {CLASS}
FIRST(classbody) = {ABRCHAVE}
FIRST(vardecl) = {INT, STRING, IDENT}
FIRST(constructdecl) = {CONSTRUCTOR}
FIRST(methoddecl) = {INT, STRING, IDENT}
FIRST(methodbody) = {ABRPAR}
FIRST(printstat) = {PRINT}
FIRST(readstat) = {READ}
FIRST(returnstat) = {RETURN}
FIRST(superstat) = {SUPER}
FIRST(ifstat) = {IF}
FIRST(forstat) = {FOR}
FIRST(lvalue) = {IDENT}
FIRST(alocexpression) = {NEW}

FIRST(classlist) = FIRST(classdecl) = {CLASS}
FIRST(paramlist) = {INT, STRING, IDENT, ε}
FIRST(atribstat) = FIRST(lvalue) = {IDENT}
FIRST(factor) = {INTCONSTANT, STRINGCONSTANT, NULL, ABRPAR} ∪ FIRST(lvalue) = {INTCONSTANT, STRINGCONSTANT, NULL, IDENT, ABRPAR}

FIRST(program) = FIRST(classlist) ∪ {ε} = {CLASS, ε}
FIRST(unaryexpr) = {OPMAIS, OPMENOS} ∪ FIRST(factor) = {OPMAIS, OPMENOS, INTCONSTANT, STRINGCONSTANT, NULL, IDENT, ABRPAR}
FIRST(term) = FIRST(unaryexpr) = {OPMAIS, OPMENOS, INTCONSTANT, STRINGCONSTANT, NULL, IDENT, ABRPAR}
FIRST(numexpression) = FIRST(term) = {OPMAIS, OPMENOS, INTCONSTANT, STRINGCONSTANT, NULL, IDENT, ABRPAR}
FIRST(expression) = FIRST(numexpression) = {OPMAIS, OPMENOS, INTCONSTANT, STRINGCONSTANT, NULL, IDENT, ABRPAR}
FIRST(arglist) = FIRST(expression) ∪ {ε} = {OPMAIS, OPMENOS, INTCONSTANT, STRINGCONSTANT, NULL, IDENT, ABRPAR, ε}

FIRST(statement) = FIRST(vardecl) ∪ FIRST(atribstat) ∪ FIRST(readstat) ∪ FIRST(returnstat) ∪ FIRST(ifstat) ∪ FIRST(forstat) ∪ {ABRCHAVE, BREAK, PTVIR}
          = {INT, STRING, IDENT} ∪ {IDENT} ∪ {READ} ∪ {RETURN} ∪ {IF} ∪ {FOR} ∪ {ABRCHAVE, BREAK, PTVIR}
          
Como podemos ver, {INT, STRING, IDENT} ∩ {IDENT} = {IDENT} ≠  φ. Logo, a primeira e segunda produções de statement não estão fatoradas. Fatoramos:

statement → vardecl PTVIR | atribstat PTVIR

substituindo as produções de vardecl e atribstat:

statement → (INT | STRING | IDENT) IDENT (ABRCOL FECHCOL)* (VIRG IDENT ( ABRCOL FECHCOL)*)* PTVIR |  lvalue ATR (expression | alocexpression) PTVIR

substituimos lvalue e isolamos as produções não fatoradas (aquelas que começam com IDENT):

statement → (INT | STRING | IDENT) IDENT (ABRCOL FECHCOL)* (VIRG IDENT ( ABRCOL FECHCOL)*)* PTVIR |
          IDENT (ABRCOL expression FECHCOL | PONTO IDENT ( ABRPAR arglist FECHPAR )?)* ATR (expression | alocexpression) PTVIR

statement → (INT | STRING) IDENT (ABRCOL FECHCOL)* (VIRG IDENT ( ABRCOL FECHCOL)*)* PTVIR |
            IDENT IDENT (ABRCOL FECHCOL)* (VIRG IDENT ( ABRCOL FECHCOL)*)* PTVIR |
            IDENT (ABRCOL expression FECHCOL | PONTO IDENT ( ABRPAR arglist FECHPAR )?)* ATR (expression | alocexpression) PTVIR

fatorando a segunda e terceira produções:

statement → (INT | STRING) IDENT (ABRCOL FECHCOL)* (VIRG IDENT ( ABRCOL FECHCOL)*)* PTVIR |
            IDENT statementaux

statementaux → IDENT (ABRCOL FECHCOL)* (VIRG IDENT ( ABRCOL FECHCOL)*)* PTVIR |
               (ABRCOL expression FECHCOL | PONTO IDENT ( ABRPAR arglist FECHPAR )?)* ATR (expression | alocexpression) PTVIR

conjuntos first das produções acima:
FIRST'(statement) = {INT, STRING, IDENT}
FIRST'(statementaux) = {IDENT, ABRCOL, PONTO, ATR}

logo, conseguimos fatorar estas produções. Continuando:

FIRST(statement) = {INT, STRING, IDENT} ∪ {READ} ∪ {RETURN} ∪ {IF} ∪ {FOR} ∪ {ABRCHAVE, BREAK, PTVIR}
          = {INT, STRING, IDENT, READ, RETURN, IF, FOR, ABRCHAVE, BREAK, PTVIR}          
FIRST(statementaux) = {IDENT, ABRCOL, PONTO, ATR}
FIRST(statlist) = FIRST(statement) = {INT, STRING, IDENT, READ, RETURN, IF, FOR, ABRCHAVE, BREAK, PTVIR}

Como já analisamos todas as produções, terminamos.

A gramática fatorada fica idêntica à original, exceto pelas produções de statement, que devem ser substituidas pelas novas:

statement → (INT | STRING) IDENT (ABRCOL FECHCOL)* (VIRG IDENT ( ABRCOL FECHCOL)*)* PTVIR | IDENT statementaux |
            readstat PTVIR | returnstat PTVIR | ifstat | forstat PTVIR | ABRCHAVE statlist FECHCHAVE | BREAK PTVIR | PTVIR;

Também devemos adicionar as novas produções de statementaux:

statementaux → IDENT (ABRCOL FECHCOL)* (VIRG IDENT ( ABRCOL FECHCOL)*)* PTVIR |
               (ABRCOL expression FECHCOL | PONTO IDENT ( ABRPAR arglist FECHPAR )?)* ATR (expression | alocexpression) PTVIR

Agora, a gramática está fatorada à esquerda, para um símbolo; isto é, é LL(1).


3. A gramática X++ está em LL(3). Por que o 3?

LL(k) indica que a gramática pode ser analizada por um analisador sintático LL(k), que faz o análise da esquerda pra direita (L = Left to right) e constroi a derivação mais à esquerda (L = leftmost derivation), o k indica quantos símbolos à frente o analisador irá verificar. 

Como a gramática não está fatorada à esquerda para um símbolo nem para dois símbolos, mas sim para três símbolos, então esta gramática é LL(3)

